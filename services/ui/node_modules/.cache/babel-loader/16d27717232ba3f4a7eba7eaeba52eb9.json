{"ast":null,"code":"var _jsxFileName = \"/home/khalil/FYP_website/react_ui/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport 'react-chatbox-component/dist/style.css';\nimport React, { useState, useEffect } from \"react\";\nimport { ChatBox } from 'react-chatbox-component';\nimport 'react-chatbox-component/dist/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const CHATBOT_AVATAR_URL = \"https://images.idgesg.net/images/article/2018/02/artificial_intelligence_ai_virtual_assistant_robot_chatbot_thinkstock_856909876-100749925-large.jpg\";\n  const USER_AVATAR_URL = \"https://upload.wikimedia.org/wikipedia/commons/thumb/f/f9/OOjs_UI_icon_userAvatar-constructive.svg/1024px-OOjs_UI_icon_userAvatar-constructive.svg.png\";\n  const [messageHistory, setMessageHistory] = useState([]);\n  const [ws, setWs] = useState(null);\n  const [wordClassifications, setWordClassifications] = useState([]);\n  const currnetUser = {\n    \"uid\": \"user1\"\n  };\n  useEffect(() => {\n    let ws = new WebSocket(\"ws://localhost:8000/bot\");\n\n    ws.onopen = () => {\n      console.log(\"connected websocket main component\");\n      setWs(ws);\n    };\n\n    ws.onclose = e => {\n      console.log('Socket is closed.', e.reason);\n    };\n  }, []);\n\n  if (ws) {\n    ws.onmessage = event => {\n      let botMsg = createFullMessage(event.data, 'chatbot', 'chatbot1', CHATBOT_AVATAR_URL);\n      updateChat(botMsg);\n    };\n  }\n\n  const createFullMessage = (text, name, uid, avatar_url) => {\n    return {\n      id: messageHistory.length + 1,\n      text: text,\n      name\n    };\n  };\n\n  const submitMessage = (text, name, uid, avatar_url) => {\n    requestClassification(text);\n\n    if (ws) {\n      ws.send(text);\n      let userMsg = createFullMessage(text, name, uid, avatar_url);\n      updateChat(userMsg);\n    }\n  };\n\n  const updateChat = msg => {\n    let newMessageHistory = messageHistory.concat([msg]);\n    setMessageHistory(newMessageHistory);\n  };\n\n  const displayWordClassifications = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Word Breakdown\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: {\n          listStyle: 'none',\n          display: 'inline-block'\n        },\n        children: wordClassifications.map((classification, index) => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"word: \", classification.word, \" level: \", classification.level]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  };\n\n  const requestClassification = text => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        message: text\n      })\n    };\n    fetch('http://localhost:8001/classify', requestOptions).then(async response => {\n      const data = await response.json(); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.message || response.status;\n        return Promise.reject(error);\n      }\n\n      let newWordClassifications = wordClassifications.concat(data);\n      const seen = new Set();\n      const filteredWordClassifications = newWordClassifications.filter(el => {\n        const duplicate = seen.has(el.word);\n        seen.add(el.word);\n        return !duplicate;\n      });\n      setWordClassifications(filteredWordClassifications);\n    }).catch(error => {\n      // this.setState({ errorMessage: error.toString() });\n      console.error('There was an error!', error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chinese Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main_items_container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Grammar Breakdown\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: [\"box\", \"chatbox_container\"].join(\" \"),\n        children: /*#__PURE__*/_jsxDEV(ChatBox, {\n          style: {\n            width: '100%'\n          },\n          messages: messageHistory,\n          onSubmit: newMsg => submitMessage(newMsg, 'currentUser', \"user1\", USER_AVATAR_URL) // isLoading={ws == null || ws.readyState == WebSocket.CLOSED}\n          ,\n          user: currnetUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), displayWordClassifications()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"I1yl8euDnuq5OBbBMLapnrt0E4s=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/khalil/FYP_website/react_ui/src/App.js"],"names":["React","useState","useEffect","ChatBox","App","CHATBOT_AVATAR_URL","USER_AVATAR_URL","messageHistory","setMessageHistory","ws","setWs","wordClassifications","setWordClassifications","currnetUser","WebSocket","onopen","console","log","onclose","e","reason","onmessage","event","botMsg","createFullMessage","data","updateChat","text","name","uid","avatar_url","id","length","submitMessage","requestClassification","send","userMsg","msg","newMessageHistory","concat","displayWordClassifications","listStyle","display","map","classification","index","word","level","requestOptions","method","headers","body","JSON","stringify","message","fetch","then","response","json","ok","error","status","Promise","reject","newWordClassifications","seen","Set","filteredWordClassifications","filter","el","duplicate","has","add","catch","join","width","newMsg"],"mappings":"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","sourcesContent":["import './App.css';\nimport 'react-chatbox-component/dist/style.css';\nimport React, { useState, useEffect } from \"react\";\nimport { ChatBox } from 'react-chatbox-component';\nimport 'react-chatbox-component/dist/style.css';\n\nfunction App() {\n  const CHATBOT_AVATAR_URL = \"https://images.idgesg.net/images/article/2018/02/artificial_intelligence_ai_virtual_assistant_robot_chatbot_thinkstock_856909876-100749925-large.jpg\"\n  const USER_AVATAR_URL = \"https://upload.wikimedia.org/wikipedia/commons/thumb/f/f9/OOjs_UI_icon_userAvatar-constructive.svg/1024px-OOjs_UI_icon_userAvatar-constructive.svg.png\"\n  const [messageHistory, setMessageHistory] = useState([])\n  const [ws, setWs] = useState(null)\n  const [wordClassifications, setWordClassifications] = useState([])\n  const currnetUser = {\n    \"uid\": \"user1\"\n  }\n\n  useEffect(() => {\n    let ws = new WebSocket(\"ws://localhost:8000/bot\");\n    ws.onopen = () => {\n      console.log(\"connected websocket main component\");\n      setWs(ws)\n    };\n    ws.onclose = e => {\n      console.log(\n        'Socket is closed.', e.reason\n      );\n    }\n  }, [])\n\n  if (ws) {\n    ws.onmessage = (event) => {\n      let botMsg = createFullMessage(event.data, 'chatbot', 'chatbot1', CHATBOT_AVATAR_URL)\n      updateChat(botMsg)\n    };\n  }\n\n  const createFullMessage = (text, name, uid, avatar_url) => {\n    return {\n      id: messageHistory.length + 1,\n      text: text,\n      name\n\n    }\n  }\n\n  const submitMessage = (text, name, uid, avatar_url) => {\n    requestClassification(text)\n    if (ws) {\n      ws.send(text)\n      let userMsg = createFullMessage(text, name, uid, avatar_url)\n      updateChat(userMsg)\n    }\n  }\n\n  const updateChat = (msg) => {\n    let newMessageHistory = messageHistory.concat([msg])\n    setMessageHistory(newMessageHistory)\n  }\n\n  const displayWordClassifications = () => {\n    return (\n      <div className='box'>\n        <h2>Word Breakdown</h2>\n        <ul style={{ listStyle: 'none', display: 'inline-block' }}>\n          {wordClassifications.map((classification, index) => {\n            return <li key={index}>word: {classification.word} level: {classification.level}</li>\n          })}\n        </ul>\n      </div>\n\n    )\n\n  }\n\n  const requestClassification = text => {\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ message: text })\n    };\n    fetch('http://localhost:8001/classify', requestOptions)\n      .then(async response => {\n        const data = await response.json();\n\n        // check for error response\n        if (!response.ok) {\n          // get error message from body or default to response status\n          const error = (data && data.message) || response.status;\n          return Promise.reject(error);\n        }\n        let newWordClassifications = wordClassifications.concat(data)\n        const seen = new Set();\n        const filteredWordClassifications = newWordClassifications.filter(el => {\n          const duplicate = seen.has(el.word);\n          seen.add(el.word);\n          return !duplicate;\n        });\n        setWordClassifications(filteredWordClassifications)\n      })\n      .catch(error => {\n        // this.setState({ errorMessage: error.toString() });\n        console.error('There was an error!', error);\n      });\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Chinese Chatbot</h1>\n      <div className='main_items_container'>\n        <div className='box'>\n          <h2>Grammar Breakdown</h2>\n        </div>\n        <div className={[\"box\",\"chatbox_container\"].join(\" \")}>\n          <ChatBox\n          style={{width:'100%'}}\n            messages={messageHistory}\n            onSubmit={(newMsg) => submitMessage(newMsg, 'currentUser', \"user1\", USER_AVATAR_URL)}\n            // isLoading={ws == null || ws.readyState == WebSocket.CLOSED}\n            user={currnetUser} />\n        </div>\n        {displayWordClassifications()}\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}